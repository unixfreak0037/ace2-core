#!/usr/bin/env bash

#
# how do these commands get added to the cli?
#
# get_cli(command="blah") returns a subparser for the target (sub)command
# ace2 blah
#

# env vars
export ACE_ADMIN_PASSWORD="test"
export ACE_URI="http://localhost"
export ACE_DB="blah"
export ACE_REDIS="blah"
export ACE_STORAGE_ROOT="/path/to/files"
export ACE_PACKAGE_URL="https://ace2.io/packages"
export ACE_API_KEY="blah"

# crypto env vars (this requires some thought)
# likely autogenerated when the core starts for the first time
export ACE_CRYPTO_VERIFICATION_KEY
export ACE_CRYPTO_SALT
export ACE_CRYPTO_SALT_SIZE
export ACE_CRYPTO_ITERATIONS
export ACE_CRYPTO_ENCRYPTED_KEY

# analyze the given ipv4
# if no env vars are set, it just loads up a threaded core and uses that
# and any modules that is has available
# if ACE_URI is set, it uses a remote system interface (ignoring local modules?)
ace2 analyze ipv4 1.2.3.4

# analyze the given file
ace2 analyze file /path/to/file

# load the modules at the given target
# this replaces what we call "integrations" today
ace2 package install git@github.com:ace-ecosystem/ace2-modules.git
ace2 package install /some/path/to/ace/modules
ace2 package install http://some/url.zip

# list the loaded packages
ace2 package list

# get package info
ace2 package info blah

# remove (uninstall) a package
ace2 package uninstall blah

# list available services
ace2 service list

# starts everything that is registered to start
ace2 service start

# start a specific thing
ace2 service start core # <-- not sure this actually makes sense
ace2 service start hunter

# stops everything ace knows is running
ace2 service stop

# stops the core
ace2 service stop core # <-- ???

# print the status of everything
ace2 status

# print the status of a specific thing
ace2 status service core

# print the status of a specific module
ace2 status module blah

# print the status of a specific root 
ace2 status root blah

# print the status of a specific analysis request
ace2 status request blah

# list all available analysis modules
ace2 module list

# disable the given module
ace2 module disable blah

# disable the modules of a specific type
ace2 module disable --type splunk

# enable the given module
ace2 module enable blah

# clear the entire cache
ace2 cache clear --all

# clear a specific cache entry
ace2 cache clear key

# dump the entire configuration
ace2 config get

# dump a single configuration setting
ace2 config get key

# set a configuration value
ace2 config set key value

# delete a configuration value
ace2 config delete key

# apply a yaml configuration file
ace2 config apply /path/to/config.yml

# changes admin password (prompted)
ace2 password set

# generate a new api key (requires admin password)
ace2 api create

# generate a new admin-level api key (requires admin password)
ace2 api create --admin

# delete an api key (requires admin password)
ace2 api delete name

# get the specific file
ace2 file download blah

# upload the specified file
ace2 file upload blah
